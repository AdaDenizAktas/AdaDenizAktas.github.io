import{C as E,u as _,r as k,k as y,o as L,D as O,c as o,a as t,b as x,t as a,f as d,y as u,F as m,h,w as A,E as N,B,e as r,n as T,g as C,T as F,_ as q}from"./index-beLs5TVV.js";import"./three-B5XxB57c.js";const v=[{id:"csharp-gc-basics",title:"C# Garbage Collector: How Memory Cleans Itself",summary:"The Garbage Collector (GC) frees memory automatically; controlling allocations prevents jitter, pauses, and CPU spikes.",skills:["C#",".NET","Performance"],pillars:{definition:"GC tracks unreachable objects and reclaims memory in generations; Gen0/Gen1 for short-lived, Gen2 + LOH for long-lived/large objects.",whenToUse:["Use pools for temporary buffers or reusable arrays.","Use spans/stackalloc for small transient data to reduce heap allocations."],whenToAvoid:["Avoid object churn in tight loops / per-frame code.","Avoid finalizers unless necessary (wrapping unmanaged handles)."],keyRules:["Profile allocations with PerfView / dotnet-trace / VS Profiler.","Prefer struct-based hot-path patterns only when small, immutable.","Batch work to amortize allocations.","Prefer StringBuilder or composite formatting over concatenation in loops.","Pool large arrays (ArrayPool<byte>) to reduce LOH pressure.","Use IAsyncDisposable to release async resources promptly.","Use GC.TryStartNoGCRegion only with strong evidence and short windows."],pitfalls:["Frequent boxing or string concat bloats heap.","Large arrays fragment LOH if frequently allocated/freed.","Lingering references keep objects alive unintentionally.","Finalizer queues slow reclamation when overused."],examples:["Buffer reuse in HTTP file-upload endpoints.","Pooling image byte arrays in Unity render loops."]},history:{then:"Manual GC tuning and visible pauses were common.",now:"Concurrent/Background compacting GC makes tuning mostly automatic; LOH compaction and pooling are standard.",dateThen:"2010s",dateNow:"2020s"},exampleCode:`// Efficient reuse with ArrayPool
var pool = ArrayPool<byte>.Shared;
byte[] buffer = pool.Rent(1024);
try {
  await stream.ReadAsync(buffer.AsMemory(0, 1024), ct);
} finally {
  pool.Return(buffer, clearArray: false);
}`,references:["https://learn.microsoft.com/dotnet/standard/garbage-collection/","https://devblogs.microsoft.com/dotnet/understanding-the-garbage-collector/","https://learn.microsoft.com/dotnet/standard/garbage-collection/fundamentals"]},{id:"csharp-value-vs-reference",title:"Value vs Reference Types: How Data Lives in Memory",summary:"Value types copy; reference types share identity; choose by size, mutability, and semantics.",skills:["C#","Performance"],pillars:{definition:"A value type stores data inline and copies by value; a reference type stores a pointer and copies by reference.",whenToUse:["Use small immutable structs for tight loops and DTOs.","Use classes for identity, polymorphism, and shared lifetime."],whenToAvoid:["Avoid large mutable structs (>32–64 bytes).","Avoid boxing (casting struct to object/interface) in hot paths."],keyRules:["Use readonly struct / record struct to encode immutability.","Pass large readonly structs by `in` to avoid copies.","Prefer records for value-based equality.","Beware mutating structs via properties/foreach (copies).","Use interfaces sparingly with structs to avoid boxing.","Benchmark (BenchmarkDotNet) before changing types."],pitfalls:["Silent boxing allocations in LINQ to interfaces.","Mutating a struct fetched from a dictionary modifies a copy."],examples:["`Point` as record struct for coordinates.","`Person` as class with identity and behavior."]},history:{then:"Classes everywhere; structs avoided.",now:"Span<T>, ref structs, and records normalized value-oriented design.",dateThen:"2000s",dateNow:"2020s"},exampleCode:`public readonly record struct Point(int X, int Y);
var a = new Point(3,4);
var b = a; // copy
Console.WriteLine(a == b); // True`,references:["https://learn.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/","https://learn.microsoft.com/dotnet/csharp/fundamentals/types/records"]},{id:"csharp-async-vs-background",title:"Async vs Background Services: Short Tasks vs Long Loops",summary:"Async/await scales I/O-bound work; BackgroundService hosts durable loops with lifecycle and DI.",skills:["C#",".NET","Architecture"],pillars:{definition:"`async/await` returns to the caller during awaits; `BackgroundService` runs supervised, cancellable loops in the Host.",whenToUse:["Use async in controllers/handlers for I/O-bound scalability.","Use BackgroundService for queue consumers, schedulers, and watchers.","Use channels/async streams for backpressure and pipelines."],whenToAvoid:["Avoid Task.Run for I/O; it steals threads.","Avoid blocking waits (Result/Wait) inside async contexts."],keyRules:["Propagate CancellationToken end-to-end.","Catch and log exceptions inside the worker loop.","Use PeriodicTimer for periodic tasks.","Bound concurrency with SemaphoreSlim/Channel.","Emit health checks / readiness for orchestrators.","Make loops idempotent and restart-safe.","Prefer IHostedService registration via AddHostedService."],pitfalls:["Fire-and-forget tasks drop exceptions.","Thread pool starvation from sync-over-async.","Unbounded parallelism overwhelms downstreams."],examples:["Kafka/Service Bus consumer as BackgroundService.","HTTP fan-out with async/await and concurrency limiters."]},history:{then:"BackgroundWorker/ThreadPool with ad-hoc shutdown.",now:"Generic Host with DI, health checks, and graceful shutdown.",dateThen:"pre-.NET Core",dateNow:".NET 6+"},exampleCode:`public sealed class Worker : BackgroundService {
  protected override async Task ExecuteAsync(CancellationToken ct) {
    var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
    while (await timer.WaitForNextTickAsync(ct)) {
      await ProcessOnceAsync(ct);
    }
  }
}`,references:["https://learn.microsoft.com/dotnet/core/extensions/background-services","https://learn.microsoft.com/dotnet/csharp/asynchronous-programming/"]},{id:"csharp-exception-handling",title:"Exceptions: Fail Fast, Handle Once, Log With Context",summary:"Use exceptions for exceptional paths; centralize handling, attach context, avoid swallowing.",skills:["C#",".NET","Architecture"],pillars:{definition:"Exceptions unwind the stack to a handler; use them sparingly and centrally to keep code paths clear.",whenToUse:["Use for truly exceptional, unrecoverable states.","Use filters/middleware to map exceptions to HTTP results."],whenToAvoid:["Avoid using exceptions for control flow in hot paths.","Avoid catch-all without logging/metrics."],keyRules:["Throw early with precise types (ArgumentException, InvalidOperation).","Attach correlation IDs and request context to logs.","Map domain exceptions to 4xx results; system faults to 5xx.","Prefer Result/OneOf for expected business failures.","Never hide exceptions; convert to actionable telemetry.","Include stack and key inputs, redact secrets."],pitfalls:["Swallowing exceptions silently.","Catching System.Exception at deep layers.","Throwing in finally blocks hides root cause."],examples:["Global ASP.NET Core exception middleware → ProblemDetails.","DomainValidationException → 422 Unprocessable Entity."]},history:{then:"Ad-hoc try/catch scattered.",now:"Central exception middleware, ProblemDetails, structured logging.",dateThen:"ASP.NET",dateNow:"ASP.NET Core"},exampleCode:`app.UseExceptionHandler("/error");
app.Map("/error", (HttpContext ctx) => {
  var feat = ctx.Features.Get<IExceptionHandlerFeature>();
  // map feat.Error -> ProblemDetails
});`,references:["https://learn.microsoft.com/aspnet/core/fundamentals/error-handling","https://datatracker.ietf.org/doc/html/rfc7807"]},{id:"dotnet-logging-observability",title:"Observability: Logs, Metrics, Traces That Answer “Why?”",summary:"Emit structured logs, key SLIs as metrics, and distributed traces; correlate with IDs.",skills:[".NET","Architecture","Devops","Performance"],pillars:{definition:"Observability combines logs (what happened), metrics (how much), and traces (where/why) to explain behavior.",whenToUse:["Use structured logging in every service.","Use OpenTelemetry for vendor-neutral exporting."],whenToAvoid:["Avoid string logs without structure.","Avoid high-cardinality labels that explode costs."],keyRules:["Use correlation/trace IDs across requests.","Log at source of truth once; summarize elsewhere.","Define SLOs on latency, error rate, saturation.","Redact PII/secrets at the edge.","Sample high-volume traces.","Dashboards + alerts tied to business outcomes.","Use semantic conventions for consistency."],pitfalls:["Log spam hides signals.","Cardinality explosion in metrics (user_id tags).","Missing context prevents incident triage."],examples:["OTel instrumentation + collector → Grafana Tempo/Prometheus.","Serilog JSON logs → ELK/OpenSearch indexes."]},history:{then:"Plain text logs and grep.",now:"OpenTelemetry, semantic logs, SLO-based alerting.",dateThen:"2010s",dateNow:"2020s"},exampleCode:`builder.Services.AddOpenTelemetry()
  .WithTracing(t => t.AddAspNetCoreInstrumentation().AddHttpClientInstrumentation())
  .WithMetrics(m => m.AddAspNetCoreInstrumentation());`,references:["https://opentelemetry.io/docs/","https://learn.microsoft.com/dotnet/core/diagnostics/"]},{id:"dotnet-configuration-options",title:"Configuration & Options: One Source, Many Environments",summary:"Bind strongly-typed options from providers; validate, reload, and keep secrets out of code.",skills:[".NET","Architecture"],pillars:{definition:"Options pattern maps hierarchical config (JSON, env, secrets) to typed classes with validation.",whenToUse:["Feature toggles, service endpoints, policy limits.","Multi-env deployments with overrides."],whenToAvoid:["Avoid static globals; prefer IOptionsSnapshot in web scopes.",'Avoid sprinkling Configuration["x"] across code.'],keyRules:["Validate on startup (ValidateDataAnnotations/ValidateOnStart).","Use Secret Managers / Vault; never commit secrets.","ReloadOnChange for JSON in dev only.","Keep config immutable at runtime; push updates via deploy.","Namespace keys per bounded context.","Expose config via health/info endpoints carefully."],pitfalls:["Runtime mutable config causing nondeterminism.","Leaking secrets via logs/dumps."],examples:["IOptionsMonitor for background services that need live reload.","Azure App Configuration / Consul for centralized settings."]},history:{then:"web.config with XML transforms.",now:"Provider-based config with typed options and validation.",dateThen:"ASP.NET",dateNow:"ASP.NET Core"},exampleCode:`builder.Services.AddOptions<MyLimits>()
  .Bind(builder.Configuration.GetSection("Limits"))
  .ValidateDataAnnotations()
  .ValidateOnStart();`,references:["https://learn.microsoft.com/aspnet/core/fundamentals/configuration/","https://learn.microsoft.com/aspnet/core/fundamentals/configuration/options"]},{id:"efcore-performance",title:"EF Core Performance: Fast Queries, Predictable Tracking",summary:"Project what you need, track only when needed, and batch roundtrips.",skills:["C#",".NET","SQL","Performance"],pillars:{definition:"EF Core maps LINQ to SQL; tracking attaches entities for change detection; projection avoids heavy graphs.",whenToUse:["Use AsNoTracking for read-only queries.","Use Select projections to DTOs to reduce payload."],whenToAvoid:["Avoid N+1 by including related data or batching.","Avoid client-side evaluation in production."],keyRules:["Use compiled queries for hot paths.","Prefer bulk operations/tools for mass updates.","Use proper indexes, check query plans.","Split queries for very large includes (AsSplitQuery).","Transaction scopes for multi-command consistency.","Paginate with keyset for large offsets."],pitfalls:["Accidental lazy loading amplifies round trips.","Mapping entire graphs into memory for simple reads."],examples:["Project to lightweight list items for grids.","Keyset pagination on time-sorted feeds."]},history:{then:"EF6 with heavy tracking and lazy-loading defaults.",now:"EF Core with compiled queries, no client eval by default.",dateThen:"EF6 era",dateNow:"EF Core 7/8"},exampleCode:`var items = await db.Posts
  .AsNoTracking()
  .OrderByDescending(p => p.PublishedAt)
  .Select(p => new PostListItem { p.Id, p.Title })
  .ToListAsync(ct);`,references:["https://learn.microsoft.com/ef/core/performance/","https://learn.microsoft.com/ef/core/querying/related-data"]},{id:"csharp-linq-pitfalls",title:"LINQ Pitfalls: Deferred Execution, Allocations, Surprises",summary:"Understand deferred execution, materialize intentionally, and avoid hidden allocations.",skills:["C#","Performance"],pillars:{definition:"Most LINQ queries are deferred until enumerated; some operators buffer (ToList, GroupBy).",whenToUse:["Use LINQ for clarity in non-hot paths.","Use imperative loops when allocations/branches matter."],whenToAvoid:["Avoid LINQ in ultra-hot per-item loops.","Avoid mixing client eval with EF queries."],keyRules:["Measure allocations with BenchmarkDotNet.","Use `.Any()` instead of `.Count() > 0`.","Prefer `.Select` projections to shape data early.","Avoid repeated `.ToList()` calls; materialize once.","Be explicit about ordering; LINQ doesn’t guarantee unless specified.","Use `Span`/`Memory` for tight array processing."],pitfalls:["Multiple enumeration of IEnumerable.","Accidental O(n²) via nested LINQ.","Capturing loop vars in lambdas incorrectly (older code)."],examples:["Project-only fields for API responses.","Replace `.Where().FirstOrDefault()` with `.FirstOrDefault(predicate)`."]},history:{then:"LINQ everywhere without measurement.",now:"Targeted LINQ with profiling and Span-based alternatives.",dateThen:"2010s",dateNow:"2020s"},exampleCode:"if (list.Any(x => x.Id == id)) { /* fast exists */ }",references:["https://learn.microsoft.com/dotnet/csharp/programming-guide/concepts/linq/"]},{id:"sdlc-overview",title:"Software Delivery Lifecycle: From Plan to Production",summary:"Compress Plan→Build→Test→Release→Monitor→Learn with automation and clear feedback loops.",skills:["Devops","Architecture","GIT","DOCKER","CI/CD"],pillars:{definition:"SDLC is an iterative system of discovery, delivery, and learning; DevOps integrates ops into the loop.",whenToUse:["Use CI/CD for any continuously delivered service.","Use trunk-based development with short-lived branches."],whenToAvoid:["Avoid long manual release chains.","Avoid environment snowflakes without IaC."],keyRules:["Automate validation, linting, security scans, and deployment.","Treat infra as versioned code; review via PRs.","Observability first: logs, metrics, tracing.","Define SLOs and error budgets.","Feature-flag risky releases.","Blue/green or canary for safe rollouts.","Have a tested rollback/runbook."],pitfalls:["Skipping monitoring hides regressions.","No rollback plan turns incidents into outages.","Long-lived branches create merge hell."],examples:["GitHub Actions building/testing/deploying containers.","Terraform provisioning base infra across envs."]},history:{then:"Siloed teams, quarterly releases.",now:"Continuous delivery with platform engineering and paved roads.",dateThen:"2000s",dateNow:"2020s"},exampleCode:`# Minimal CI/CD (GitHub Actions)
- uses: actions/checkout@v4
- run: npm ci
- run: npm test -- --ci
- run: docker build -t web:latest .`,references:["https://learn.microsoft.com/devops/what-is-devops","https://12factor.net/"]},{id:"testing-tdd-bdd-ddd",title:"TDD, BDD, and DDD: Build What’s Needed, Nothing More",summary:"TDD defines logic, BDD defines behavior, DDD defines structure; together they prevent waste.",skills:["Testing","Architecture","C#","Devops"],pillars:{definition:"TDD: red→green→refactor; BDD: Given/When/Then; DDD: ubiquitous language + bounded contexts.",whenToUse:["TDD for logic-heavy modules and refactor safety.","BDD for cross-functional acceptance criteria.","DDD for complex domains and multi-team systems."],whenToAvoid:["Avoid over-testing trivial CRUD glue.","Avoid DDD ceremony for simple apps."],keyRules:["Keep tests atomic, deterministic, and fast.","Test behavior, not private internals.","Use contract/consumer-driven tests between services.","Model aggregates with invariants; avoid anemic models.","Layer tests: acceptance → integration → unit.","Refactor fearlessly with green tests.","Keep ubiquitous language in code and docs."],pitfalls:["Mock abuse couples tests to implementation.","Unclear bounded contexts create tight coupling."],examples:["Gherkin features for order flows.","Aggregate root for Payment with invariant checks."]},history:{then:"Tests as afterthought; big mocks.",now:"Living specs and contracts drive architecture.",dateThen:"2000s",dateNow:"2020s"},exampleCode:`[Fact]
public void Deposit_IncreasesBalance(){
  var acc = new Account(100);
  acc.Deposit(50);
  Assert.Equal(150, acc.Balance);
}`,references:["https://martinfowler.com/bliki/TestDrivenDevelopment.html","https://cucumber.io/docs/bdd/","https://learn.microsoft.com/dotnet/architecture/modern-web-apps/domain-driven-design"]},{id:"testing-unit-vs-integration",title:"Unit vs Integration Tests: Scope, Speed, and Confidence",summary:"Unit tests isolate a component; integration tests verify collaboration. Balancing both ensures fast feedback and realistic coverage.",skills:["Testing","Architecture","C#","Devops"],pillars:{definition:"Unit tests focus on a single class or function without external dependencies. Integration tests validate interactions between modules, DBs, and APIs.",whenToUse:["Use unit tests for pure logic, algorithms, and rules.","Use integration tests for boundary crossings or side effects.","Use both for layered assurance in CI pipelines."],whenToAvoid:["Avoid over-mocking in integration tests; test real behavior.","Avoid slow, brittle UI tests for logic that can be isolated."],keyRules:["Fast unit tests run on every commit (<100 ms each).","Integration tests run on PR or nightly builds.","Use realistic data fixtures and ephemeral DBs.","Keep unit tests deterministic; no network or time dependencies.","Separate test categories via naming or tags.","Mock only boundaries, never internals."],pitfalls:["Mocking too deep hides integration bugs.","Integration tests depending on shared state cause flakiness."],examples:["Unit: Verify TaxCalculator returns correct rate.","Integration: Verify full order flow persists and charges correctly."]},history:{then:"Tests blurred boundaries; everything was “unit”.",now:"CI pipelines separate fast logic tests from end-to-end checks.",dateThen:"2010s",dateNow:"2020s"},exampleCode:`[Fact]
public void Sum_ReturnsExpected(){
  var s = new MathService();
  Assert.Equal(7, s.Sum(3,4));
}

[Fact]
public async Task Order_Flow_Works(){
  var client = _factory.CreateClient();
  var res = await client.PostAsJsonAsync("/orders", new{ ItemId=1 });
  res.EnsureSuccessStatusCode();
}`,references:["https://martinfowler.com/articles/practical-test-pyramid.html","https://learn.microsoft.com/dotnet/core/testing/unit-testing-best-practices"]},{id:"testing-automation-reliability",title:"Automation Reliability: From Flaky to Deterministic",summary:"Unstable tests erode trust and slow delivery; deterministic automation keeps pipelines reliable and credible.",skills:["Testing","Architecture","C#","Devops"],pillars:{definition:"Automation reliability means tests produce the same result every run under the same code, regardless of timing or environment.",whenToUse:["Apply reliability practices to CI/CD and nightly test runs.","Use hermetic environments and seeded data for consistency."],whenToAvoid:["Avoid non-deterministic waits or random data without seeds.","Avoid shared mutable test state across runs."],keyRules:["Mock time, random, and external services deterministically.","Use fixed seeds for pseudo-random generators.","Reset state between tests (DB truncation or transactions).","Use retry only for transient infra failures, never logic bugs.","Collect flaky-test metrics and quarantine failures.","Parallelize safely using isolated temp resources."],pitfalls:["Flaky tests hide regressions by passing intermittently.","Hard-coded delays cause slow, unstable runs."],examples:["Seeding RNG for reproducible randomized tests.","Transaction-scoped test DB reset after each run."]},history:{then:"Flaky tests were accepted as “normal”.",now:"Determinism, isolation, and CI observability made reliability measurable.",dateThen:"2010s",dateNow:"2020s"},exampleCode:`[Fact]
public void RandomTest_UsesSeed(){
  var rng = new Random(42);
  var values = Enumerable.Range(0,3).Select(_=>rng.Next(0,10)).ToArray();
  Assert.Equal(new[]{7,1,0}, values);
}`,references:["https://testing.googleblog.com/2020/07/measuring-and-improving-flaky-tests.html","https://martinfowler.com/articles/nonDeterminism.html"]},{id:"api-versioning",title:"API Versioning: Evolve Without Breaking Clients",summary:"Tag contracts with versions; deprecate gracefully; support parallel shapes.",skills:["API","Architecture","C#","Devops"],pillars:{definition:"Expose versions via URL, header, or media type so clients opt into new shapes.",whenToUse:["Public/partner APIs with multiple clients.","Breaking changes to fields or semantics."],whenToAvoid:["Avoid version bumps for additive non-breaking changes."],keyRules:["Document supported versions and sunset policy.","Warn via deprecation headers before removal.","Keep server tolerant to unknown fields.","Version serialization profiles explicitly.","Default to the latest stable when safe.","Generate OpenAPI per version."],pitfalls:["Ambiguous default version selection.","Route conflicts when mixing attributes and conventions."],examples:["GET /api/v2/users","Header: api-version: 2.0"]},history:{then:"Endpoints overwritten in place.",now:"Coexisting versions with tooling and spec generation."},exampleCode:`[ApiVersion("2.0")]
[Route("api/v{version:apiVersion}/[controller]")]`,references:["https://learn.microsoft.com/aspnet/core/web-api/advanced/versioning"]},{id:"database-concurrency",title:"Database Concurrency: Prevent Lost Updates",summary:"Use optimistic tokens or pessimistic locks to avoid overwrites and corruption.",skills:["SQL","Architecture",".NET"],pillars:{definition:"Optimistic concurrency uses version tokens; pessimistic uses locks to serialize access.",whenToUse:["Optimistic for mostly non-conflicting workloads.","Pessimistic for high-conflict or destructive edits."],whenToAvoid:["Avoid table-wide locks.","Avoid last-write-wins without user review for conflicts."],keyRules:["Use RowVersion/timestamp in EF Core.","Catch DbUpdateConcurrencyException and merge.","Use transaction isolation appropriately.","Keep transactions short and scoped.","Detect and retry deadlocks with jitter."],pitfalls:["Phantom reads with low isolation.","Long-held locks causing contention."],examples:["ETag/If-Match headers for REST updates.","SELECT … FOR UPDATE in critical transfers."]},exampleCode:"public byte[] RowVersion { get; set; }",references:["https://learn.microsoft.com/ef/core/saving/concurrency"]},{id:"caching-strategy",title:"Caching: Fast Reads Without Stale Data",summary:"Cache for speed; invalidate for truth; monitor for correctness.",skills:["Architecture",".NET","Devops","API"],pillars:{definition:"Caches store frequently read data in memory/distro stores to reduce latency and load.",whenToUse:["In-memory for small hot data.","Distributed (Redis) for multi-instance services.","Output caching for expensive queries."],whenToAvoid:["Avoid caching highly dynamic per-user data without keys.","Avoid unbounded entries that strain GC."],keyRules:["Set TTLs based on freshness needs.","Invalidate on writes; use pub/sub if shared.","Stampede protection (single flight/locking).","Monitor hit/miss, size, evictions.","Separate hot and cold caches.","Use ETags/Cache-Control for HTTP."],pitfalls:["Stampedes rebuilding the same key at once.","Serving stale data after writes.","Key collisions across tenants."],examples:["MemoryCache for config/feature flags.","Redis-backed IDistributedCache for sessions.","Response caching for public endpoints."]},exampleCode:'services.AddStackExchangeRedisCache(o => o.Configuration = "localhost:6379");',references:["https://learn.microsoft.com/aspnet/core/performance/caching/"]},{id:"idempotency-retries",title:"Idempotency & Retries: Do-Over Without Double-Charging",summary:"Design operations to tolerate replays; retry transient faults with backoff.",skills:["API","Architecture","Devops"],pillars:{definition:"An idempotent operation yields the same result when repeated; retries handle transient errors safely.",whenToUse:["Payment, order creation, and webhook receivers.","Any networked call with transient failures."],whenToAvoid:["Avoid blind retries on non-transient/business errors.","Avoid retries without bounding and backoff."],keyRules:["Use idempotency keys (requestId) and de-dup storage.","Make handlers side-effect aware and conditional.","Use exponential backoff + jitter.","Classify errors: retryable vs fatal.","Record attempt metadata for audits."],pitfalls:["Double-charging due to missing keys.","Retry storms amplify outages."],examples:["Stripe-style Idempotency-Key header.","Polly policies for retry + circuit-breaker."]},history:{then:"Best-effort with manual safeguards.",now:"First-class patterns and libraries standardize safety.",dateThen:"2010s",dateNow:"2020s"},exampleCode:'services.AddHttpClient("pay").AddTransientHttpErrorPolicy(p => p.WaitAndRetryAsync(5, i => TimeSpan.FromMilliseconds(200 * Math.Pow(2, i))));',references:["https://github.com/App-vNext/Polly"]},{id:"rate-limiting-backpressure",title:"Rate Limiting & Backpressure: Protect Yourself First",summary:"Throttle inputs and shed load to keep the system stable under stress.",skills:["API","Architecture","Devops","Performance"],pillars:{definition:"Rate limiting caps requests per identity; backpressure slows producers to match consumer capacity.",whenToUse:["Public APIs exposed to the internet.","Any service with expensive downstreams."],whenToAvoid:["Avoid blanket throttles on critical internal traffic.","Avoid unbounded bursts to stateful components."],keyRules:["Bucket by tenant/user/IP/API key.","Advertise limits via headers (X-RateLimit-*).","Queue with bounded capacity; reject gracefully.","Apply token/leaky buckets for smoothing.","Autoscale with limits, not instead of them.","Protect downstreams with budgets."],pitfalls:["Global locks causing head-of-line blocking.","Starving low-traffic tenants behind noisy neighbors."],examples:["AspNetCore RateLimiter middleware with fixed/slide windows.","Channel-based queues with bounded capacity."]},exampleCode:'builder.Services.AddRateLimiter(o => o.AddFixedWindowLimiter("api", l => { l.Window = TimeSpan.FromSeconds(1); l.PermitLimit = 50; }));',references:["https://learn.microsoft.com/aspnet/core/performance/rate-limit"]},{id:"rest-design",title:"REST Design: Stable, Predictable, Evolvable",summary:"Consistent resource nouns, verbs via HTTP, and predictable responses.",skills:["API","Architecture"],pillars:{definition:"Represent things as resources (nouns); use HTTP methods and status codes for actions/results.",whenToUse:["Public/partner APIs and internal platform services."],whenToAvoid:["Avoid action-centric RPC-style for resource CRUD.","Avoid overloading POST for every operation."],keyRules:["Plural resource names; nested for ownership.","Return ProblemDetails for errors.","Use pagination (cursor/keyset) for collections.","HATEOAS optional; prefer explicit link relations.","Idempotency on PUT/DELETE.","Partial updates via PATCH with strong validation."],pitfalls:["Leaky abstractions of internal domain.","Inconsistent status codes confuse clients."],examples:["GET /v1/orders?cursor=…&limit=50","PATCH /v1/users/{id} with JSON Patch"]},history:{then:"Ad-hoc JSON endpoints.",now:"OpenAPI-first with contract tests.",dateThen:"2010s",dateNow:"2020s"},exampleCode:'app.MapGet("/v1/users", (int limit, string? cursor) => Results.Ok());',references:["https://opensource.zalando.com/restful-api-guidelines/","https://learn.microsoft.com/aspnet/core/web-api/"]},{id:"openapi-first",title:"OpenAPI-First: Design the Contract Before the Code",summary:"Generate clients/servers from a spec to eliminate drift and guesswork.",skills:["API","Architecture","Devops"],pillars:{definition:"OpenAPI describes endpoints, schemas, and auth; code is generated/validated against it.",whenToUse:["Multi-team development or external consumers.","SDK generation and contract tests."],whenToAvoid:["Avoid code-first for rapidly changing prototypes (temporary)."],keyRules:["Lint specs; require PR review.","Keep one source of truth for schemas.","Tag operations by bounded context.","Use examples and explicit enums.","Validate requests/responses in CI."],pitfalls:["Spec/code drift when editing in two places.","Ambiguous nullable/required fields."],examples:["Stoplight/SwaggerHub collaboration.","openapi-generator producing C#/TS SDKs."]},exampleCode:`// Swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();`,references:["https://swagger.io/specification/","https://github.com/OpenAPITools/openapi-generator"]},{id:"input-validation",title:"Validation: Trust Nothing From the Edge",summary:"Validate inputs at the boundary; centralize rules; return actionable errors.",skills:["API","Architecture","Security"],pillars:{definition:"Validation enforces shape, ranges, and invariants before work begins.",whenToUse:["All public and internal API boundaries.","Before DB mutations to reduce retries."],whenToAvoid:["Avoid duplicating validation across layers; share rules."],keyRules:["Use DTOs separate from entities.","Return ProblemDetails with field-level errors.","Sanitize and normalize inputs (trim, case).","Validate IDs/ownership to prevent IDOR.","Limit payload size and depth.","Rate-limit failed validation attempts."],pitfalls:["Blindly trusting client-generated IDs.","Sprinkled ad-hoc checks lead to gaps."],examples:["FluentValidation piped into minimal APIs.","Central validation filter with consistent errors."]},references:["https://learn.microsoft.com/aspnet/core/web-api/?view=aspnetcore-8.0#automatic-http-400-responses","https://github.com/FluentValidation/FluentValidation"]},{id:"docker-images",title:"Docker Images: Small, Secure, Fast to Ship",summary:"Use minimal bases, multi-stage builds, and non-root users to ship fast and safe.",skills:["DOCKER","CI/CD","Devops","Security"],pillars:{definition:"Containers package apps and dependencies; images should be small, cacheable, and non-root.",whenToUse:["All deployable services and jobs.","Local parity with production stacks."],whenToAvoid:["Avoid bloated images with build tools at runtime.","Avoid root users in production containers."],keyRules:["Multi-stage builds; copy only published artifacts.","Use distroless/alpine when possible.","Pin base image digests and scan for CVEs.","Expose health endpoints; use read-only FS.","Set USER to non-root; drop caps.","Keep layers deterministic for caching.","Leverage BuildKit/--mount=type=cache for npm/nuget."],pitfalls:["Huge images slow CI/CD and cold starts.","Secret leakage via build args/layers."],examples:["dotnet publish → distroless runtime stage.","Node build stage + nginx/distroless static."]},exampleCode:`# .NET multi-stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY . .
RUN dotnet publish -c Release -o /out

FROM gcr.io/distroless/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=build /out .
USER 10001
ENTRYPOINT ["dotnet","App.dll"]`,references:["https://docs.docker.com/develop/develop-images/multistage-build/","https://github.com/GoogleContainerTools/distroless"]},{id:"bluegreen-canary",title:"Blue-Green & Canary: Safer Releases By Design",summary:"Shift traffic gradually, watch signals, and abort fast on regressions.",skills:["CI/CD","Devops","Architecture"],pillars:{definition:"Blue-green keeps two prod environments; canary shifts traffic to a new version in slices.",whenToUse:["Risky changes, migrations, or infra upgrades.","High-traffic services needing zero-downtime."],whenToAvoid:["Avoid big-bang swaps without metrics.","Avoid manual cutovers at odd hours."],keyRules:["Automate roll-forward/rollback.","Gate on SLOs and error budgets.","Scope canaries by tenant/region.","Replicate config/secrets in both colors.","Drain connections gracefully.","Record feature flag exposure."],pitfalls:["Config drift between blue/green.","Partial rollouts with incompatible DB schema."],examples:["Kubernetes Deployment with progressive rollout.","API Gateway weighted routing for canary."]},references:["https://martinfowler.com/bliki/BlueGreenDeployment.html","https://learn.microsoft.com/azure/architecture/example-scenario/cdn/cdn-blue-green-deployment"]},{id:"vue-composition-api",title:"Vue Composition API: Reusable, Typed, Testable",summary:"Extract logic into composables; keep components thin; type everything.",skills:["Vue","Architecture","Performance"],pillars:{definition:"The Composition API groups logic by feature (useX) instead of by option; it’s easier to reuse and test.",whenToUse:["Shared behavior across multiple components.","Complex components with multiple concerns."],whenToAvoid:["Avoid huge monolith composables; split by concern."],keyRules:["Return minimal surface from composables.","Prefer refs/computed over deep reactive objects.","Use defineProps/defineEmits with TS types.","WatchEffect sparingly; prefer explicit watchers.","Lazy-load heavy modules with dynamic imports.","Use Suspense for async setup.","Provide/inject for global-yet-testable deps."],pitfalls:["Untracked mutations outside reactive context.","Memory leaks from watchers not stopped."],examples:["usePagination, useFetch with caching.","useI18n-locale sync with router."]},exampleCode:`export function useCounter(){
  const n = ref(0);
  const inc = () => n.value++;
  return { n, inc };
}`,references:["https://vuejs.org/guide/introduction.html#composition-api"]},{id:"vue-performance",title:"Vue Performance: Render Less, Work Smarter",summary:"Avoid unnecessary reactivity; virtualize big lists; chunk heavy code.",skills:["Vue","Performance"],pillars:{definition:"Rendering is CPU-bound; reactivity is memory-bound; optimize both by reducing work and keeping dependencies tight.",whenToUse:["Long lists, frequent updates, or animation-heavy views."],whenToAvoid:["Avoid reactive mega-objects; prefer granular refs.","Avoid unnecessary deep watchers."],keyRules:["v-memo/v-once for stable subtrees.","Virtual scroll for large collections.","Use key strategically to control reuse.","Debounce/throttle inputs and scroll handlers.","Pre-compute derived state with computed.","Split chunks and prefetch critical routes.","Measure with Vue Devtools performance tab."],pitfalls:["Accidental reactivity triggers (spreading reactive).","Unkeyed v-for causing DOM thrash."],examples:["100k-item table with virtual list.","Lazy route components with dynamic imports."]},references:["https://vuejs.org/guide/best-practices/performance.html"]},{id:"sql-indexing",title:"SQL Indexing: Read Fast, Write Wisely",summary:"Indexes speed reads but slow writes; design for your query shapes.",skills:["SQL","Performance","Architecture"],pillars:{definition:"Indexes provide alternative sort orders for fast seeks; composite keys cover common predicates.",whenToUse:["Frequent filters/joins on same columns.","Order-by + range scans with covering indexes."],whenToAvoid:["Avoid indexing columns with extreme write rates without need.","Avoid many overlapping similar indexes."],keyRules:["Put high-selectivity columns first.","Cover queries (INCLUDE) to avoid lookups.","Avoid functions on indexed columns in predicates.","Periodically review unused/duplicate indexes.","Use partial/filtered indexes for sparse data.","Monitor fragmentation and rebuild appropriately."],pitfalls:["Write amplification from excessive indexes.","Parameter sniffing causing bad plans."],examples:["IX_Orders_UserId_CreatedAt (INCLUDE Total).","Filtered index on IsActive=1."]},references:["https://use-the-index-luke.com/"]},{id:"sql-transactions-isolation",title:"Isolation Levels: Correctness vs Throughput",summary:"Pick the lowest isolation that preserves correctness; know your anomalies.",skills:["SQL","Architecture"],pillars:{definition:"Isolation controls visibility between concurrent transactions (read committed, repeatable read, serializable, snapshot).",whenToUse:["Use snapshot to avoid read locks with row versions.","Use serializable for invariants that can’t tolerate phantoms."],whenToAvoid:["Avoid serializable globally; it kills concurrency.","Avoid read uncommitted (dirty reads) for financial data."],keyRules:["Document invariants and map to isolation.","Keep transactions short.","Use application-level unique constraints for business keys.","Handle deadlocks by retrying with jitter.","Log long-running transactions."],pitfalls:["Phantoms breaking counts/limits.","Deadlocks from inconsistent lock ordering."],examples:["Unique index enforcing one active cart per user.","Snapshot isolation for heavy reports."]},references:["https://www.postgresql.org/docs/current/transaction-iso.html","https://learn.microsoft.com/sql/connect/jdbc/understanding-isolation-levels"]}],M={class:"py-20 bg-gradient-to-b from-[#0b0b15] via-[#101020] to-black text-slate-200"},V={class:"mx-auto w-[95%] sm:w-11/12 max-w-6xl space-y-10 sm:space-y-14"},G={class:"text-center mb-10 sm:mb-12"},z={class:"text-3xl sm:text-5xl font-extrabold uppercase tracking-widest text-white leading-tight"},H={class:"mt-3 sm:mt-4 text-slate-400 text-sm sm:text-base max-w-3xl mx-auto px-2"},j={class:"mt-8 sm:mt-10 flex flex-wrap justify-center items-center gap-2 sm:gap-3 text-xs sm:text-sm px-1"},W={class:"text-slate-400 shrink-0"},K=["onClick"],Q=["onClick"],J={class:"text-lg sm:text-2xl font-bold text-white tracking-wide mb-1 sm:mb-2 flex items-center justify-between"},X={class:"text-xs sm:text-sm text-slate-400 leading-snug"},Y={key:0,class:"space-y-4 sm:space-y-6 mt-3 sm:mt-4 text-xs sm:text-sm leading-relaxed"},$={key:0},Z={class:"text-slate-300 font-semibold mb-1"},ee={class:"text-slate-400"},te={key:1},se={class:"text-slate-300 font-semibold mb-1"},ie={class:"space-y-1.5"},oe={key:2},re={class:"bg-slate-900/60 border border-slate-700/60 rounded-md p-2 sm:p-3 text-[10px] sm:text-xs text-slate-200 overflow-x-auto"},ae={key:3},ne={class:"list-disc list-inside text-slate-400 space-y-1"},le={key:4,class:"grid sm:grid-cols-2 gap-3 sm:gap-4"},ce={class:"p-2 sm:p-3 rounded-md bg-slate-900/50 border border-slate-700/40"},de={class:"text-slate-400 uppercase text-xs sm:text-sm"},ue={class:"mt-1 text-slate-300"},pe={class:"p-2 sm:p-3 rounded-md bg-slate-900/30 border border-slate-700/40"},me={class:"text-slate-400 uppercase text-xs sm:text-sm"},he={class:"mt-1 text-slate-300"},fe={key:5},ge={class:"list-disc list-inside text-[11px] sm:text-xs space-y-1"},ye=["href"],ve=E({__name:"BestPractices",setup(be){const{t:c}=_(),g=O(),b=B(),n=k(new Set),f=k(new Set);function P(i){const s=new Set(f.value);s.has(i)?s.delete(i):s.add(i),f.value=s}const w=y(()=>{const i={};return v.forEach(s=>{s.skills.forEach(e=>{i[e]=(i[e]||0)+1})}),i}),S=y(()=>Object.keys(w.value).sort()),D=y(()=>n.value.size?v.filter(i=>i.skills.some(s=>n.value.has(s))):v);function U(i){const e={csharp:"C#",dotnet:".NET",vue:"Vue",docker:"Docker",sql:"SQL",python:"Python",git:"Git"}[i]??i,l=w.value[i]??0;return`${e} (${l})`}function I(i){const s=new Set(n.value);s.has(i)?s.delete(i):s.add(i),n.value=s;const e=new URLSearchParams(g.query);n.value.size>0?e.set("skill",Array.from(n.value).join(",")):e.delete("skill"),b.replace({query:Object.fromEntries(e)})}function R(){n.value=new Set;const i=new URLSearchParams(g.query);i.delete("skill"),b.replace({query:Object.fromEntries(i)})}return L(()=>{const i=String(g.query.skill??"").trim();i&&i.split(",").forEach(s=>n.value.add(s))}),(i,s)=>(r(),o("section",M,[t("div",V,[t("header",G,[t("h2",z,a(d(c)("best.title")),1),t("p",H,a(d(c)("best.subtitle")),1),t("div",j,[t("label",W,a(d(c)("best.filterSkill")),1),(r(!0),o(m,null,h(S.value,e=>(r(),o("button",{key:e,onClick:l=>I(e),class:T(["px-2 sm:px-3 py-1 rounded-md border tracking-wider transition-all duration-200",n.value.has(e)?"border-slate-300 text-white bg-slate-800 shadow-md shadow-slate-900/50":"border-slate-600 text-slate-400 hover:border-slate-400"])},a(U(e)),11,K))),128)),n.value.size?(r(),o("button",{key:0,onClick:R,class:"px-2 sm:px-3 py-1 rounded-md border border-slate-600 text-slate-400 hover:text-white hover:border-slate-400"},a(d(c)("best.clear")),1)):u("",!0)])]),x(N,{name:"page-fade",tag:"div",class:"space-y-8 sm:space-y-10"},{default:A(()=>[(r(!0),o(m,null,h(D.value,e=>(r(),o("article",{key:e.id,class:"rounded-lg sm:rounded-xl border border-slate-700/40 bg-gradient-to-br from-black/60 to-[#101020] p-4 sm:p-6 shadow-lg shadow-slate-900/30 hover:border-slate-500/50 transition-all duration-300"},[t("header",{class:"mb-3 sm:mb-4 cursor-pointer select-none",onClick:l=>P(e.id)},[t("h3",J,[C(a(e.title)+" ",1),t("span",{class:T(["text-slate-400 transform transition-transform duration-300 flex-shrink-0",{"rotate-90":f.value.has(e.id)}])}," ▶ ",2)]),t("p",X,a(e.summary),1)],8,Q),x(F,{name:"expand"},{default:A(()=>[f.value.has(e.id)?(r(),o("div",Y,[e.pillars.definition?(r(),o("section",$,[t("h4",Z,a(d(c)("best.definition")),1),t("p",ee,a(e.pillars.definition),1)])):u("",!0),e.pillars.keyRules?.length?(r(),o("section",te,[t("h4",se,a(d(c)("best.keyRules")),1),t("ul",ie,[(r(!0),o(m,null,h(e.pillars.keyRules,(l,p)=>(r(),o("li",{key:p,class:"flex items-start gap-1.5 sm:gap-2"},[s[0]||(s[0]=t("span",{class:"text-blue-400 mt-0.5 sm:mt-1"},"▸",-1)),C(" "+a(l),1)]))),128))])])):u("",!0),e.exampleCode?(r(),o("section",oe,[s[1]||(s[1]=t("h4",{class:"text-slate-300 font-semibold mb-1"},"Example",-1)),t("pre",re,[t("code",null,a(e.exampleCode),1)])])):u("",!0),e.pillars.examples?.length?(r(),o("section",ae,[s[2]||(s[2]=t("h4",{class:"text-slate-300 font-semibold mb-1"}," Expected Results ",-1)),t("ul",ne,[(r(!0),o(m,null,h(e.pillars.examples,(l,p)=>(r(),o("li",{key:p},a(l),1))),128))])])):u("",!0),e.history?(r(),o("section",le,[t("div",ce,[t("strong",de,a(d(c)("best.then")),1),t("p",ue,a(e.history.then),1)]),t("div",pe,[t("strong",me,a(d(c)("best.now")),1),t("p",he,a(e.history.now),1)])])):u("",!0),e.references?.length?(r(),o("section",fe,[s[3]||(s[3]=t("h4",{class:"text-slate-300 font-semibold mb-1"},"References",-1)),t("ul",ge,[(r(!0),o(m,null,h(e.references,(l,p)=>(r(),o("li",{key:p},[t("a",{href:l,target:"_blank",class:"text-blue-400 hover:text-blue-300 underline break-all"},a(l),9,ye)]))),128))])])):u("",!0)])):u("",!0)]),_:2},1024)]))),128))]),_:1})])]))}}),xe=q(ve,[["__scopeId","data-v-adf07d59"]]);export{xe as default};
